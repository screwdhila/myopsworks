{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "OpsWorks stack for SME prep",
    "Metadata": {
    },
    "Parameters": {
    },
    "Mappings": {
      "mySubnets": {
        "VPC": { "CIDR": "192.168.0.0/16" },
        "Public1": { "CIDR": "192.168.10.0/24" },
        "Private1": { "CIDR": "192.168.100.0/24" }
      }
    },
    "Conditions": {
    },
    "Resources": {
      "myVPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": {
            "Fn::FindInMap": [
              "mySubnets",
              "VPC",
              "CIDR"
            ]
          }
        }
      },
      "myIGW": {
        "Type": "AWS::EC2::InternetGateway"
      },
      "attachIGWVPC": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {
            "Ref": "myVPC"
          },
          "InternetGatewayId": {
            "Ref": "myIGW"
          }
        }
      },
      "myPublicRT": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "myVPC"
          }
        }
      },
      "myPublicRoute": {
        "Type": "AWS::EC2::Route",
        "DependsOn" : "attachIGWVPC" ,
        "Properties": {
          "RouteTableId": {
            "Ref": "myPublicRT"
          },
          "GatewayId": {
            "Ref": "myIGW"
          },
          "DestinationCidrBlock": "0.0.0.0/0"
        }
      },

      "myPublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": {
            "Fn::FindInMap": [
              "mySubnets",
              "Public1",
              "CIDR"
            ]
          },
          "VpcId": {
            "Ref": "myVPC"
          },
          "AvailabilityZone": {
            "Fn::Select" : [
              "0",
              {
                "Fn::GetAZs" : { "Ref" : "AWS::Region" }
              }
            ]
          }
        }
      },
      "gluePubRTPubSN1": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "myPublicRT"
          },
          "SubnetId": {
            "Ref": "myPublicSubnet1"
          }
        }
      },

      "OWInstanceRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": "OWInstancePolicy",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": "*",
                     "Resource": "*"
                  } ]
               }
               } ]
            }
      },
      "OWInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [ {
               "Ref": "OWInstanceRole"
            } ]
         }
      },
      "myOWStack" : {
        "Type" : "AWS::OpsWorks::Stack",
        "Properties" : {
          "Name" : {
            "Fn::Join" : [
              "_",
              [
                { "Ref": "AWS::StackName" },
                "mySMEOWStack"
              ]
            ]
          },
          "ConfigurationManager" : {
            "Name" : "Chef",
            "Version" : "11.10"
          },
          "DefaultAvailabilityZone" : {
            "Fn::Select" : [
              "0",
              {
                "Fn::GetAZs" : { "Ref" : "AWS::Region" }
              }
            ]
          },
          "DefaultOs" : "Amazon Linux 2016.09",
          "UseCustomCookbooks": "true",
          "CustomCookbooksSource" : {
            "Type" : "git",
            "Url" : "https://github.com/screwdhila/myopsworks.git"
          },
          "DefaultRootDeviceType" : "ebs",
          "DefaultSubnetId" : { "Ref" : "myPublicSubnet1" },
          "HostnameTheme" : "Legendary_creatures_from_Japan",
          "ServiceRoleArn": {
            "Fn::Join": [
              "",
              [
                "arn:aws:iam::",
                { "Ref": "AWS::AccountId" },
                ":role/aws-opsworks-service-role" ]
            ]
          },
          "DefaultInstanceProfileArn" : { "Fn::GetAtt" : [ "OWInstanceProfile", "Arn" ] },
          "UseOpsworksSecurityGroups" : "true",
          "VpcId" : { "Ref": "myVPC" }
        }
      }
      ,
      "myLayer": {
        "Type": "AWS::OpsWorks::Layer",
        "DependsOn": "myApp",
        "Properties": {
          "StackId": {"Ref": "myOWStack"},
          "Type": "nodejs-app",
  	      "Shortname" : "nodejs-app",
          "EnableAutoHealing" : "true",
          "AutoAssignElasticIps" : "false",
          "AutoAssignPublicIps" : "true",
          "Name": "MyNodeJSLayer"
        }
      },
      "ELBAttachment" : {
        "Type" : "AWS::OpsWorks::ElasticLoadBalancerAttachment",
        "Properties" : {
          "ElasticLoadBalancerName" : { "Ref" : "ELB" },
          "LayerId" : { "Ref" : "myLayer" }
        }
      },
      "ELB" : {
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
          "Subnets" : [ { "Ref" : "myPublicSubnet1" } ],
          "Listeners": [{
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }],
          "HealthCheck": {
            "Target": "HTTP:80/",
            "HealthyThreshold": "2",
            "UnhealthyThreshold": "10",
            "Interval": "30",
            "Timeout": "5"
          }
        }
      },
      "myAppInstance1": {
        "Type": "AWS::OpsWorks::Instance",
        "Properties": {
          "StackId": {"Ref": "myOWStack"},
          "LayerIds": [{"Ref": "myLayer"}],
          "InstanceType": "t2.medium",
          "AvailabilityZone" : {
            "Fn::Select" : [
              "0",
              {
                "Fn::GetAZs" : { "Ref" : "AWS::Region" }
              }
            ]
          }
        }
      },
      "myApp" : {
        "Type" : "AWS::OpsWorks::App",
        "Properties" : {
          "StackId" : {"Ref":"myOWStack"},
          "Type" : "nodejs",
          "Name" : "myapp"
        }
      }
    },
    "Outputs": {
      "VPCId" : {
        "Description" : "VPC ID",
        "Value" :  { "Ref" : "myVPC" }
      },
      "PublicSubnet" : {
        "Description" : "The subnet ID to use for public web servers",
        "Value" :  { "Ref" : "myPublicSubnet1" }
      },
      "ELB" : {
        "Value" : { "Fn::GetAtt" : [ "ELB", "DNSName" ] }
      }
    }
}
